mathservice design notes.

This project is a simple web service example.  Web server interfaces provided
via Flask (http://flask.pocoo.org/)

This example only implements an overall function_service with one current
function implemented - the Fibonacci Series.

Web Service mapping.

Get Implemented Functions:  A list of implemented functions can be retrieved 
with path "/function".  This list is returned in the following JSON form.

{
   'functions' : [ "function1", "function2", ... ]
}


Implemented functions utilize the GET operation via path 
"/function/<function_name>"

Functions:

Fibonacci Object - when populated holds the first X numbers in the 
Fibonacci Series.  X being the number passed in at object creation.
Upon the object are the following simple functions:
    - get_series      - return the populated series as a list 
    - get_series_term - get the specified term from the series (assumes 
                        series begins at 1 and so on)
    - get_last_term   - get the last term from the series
    - get_series_sum  - calculate and return the sum of all the terms 
                        in the populated series

                        
Function is implemented as a GET /function/fibonacii?number=value.
The Fibonacci Series return is formatted as a JSON string in the format below.

{
   'function' : 'fibonacci',
   'list_size': <number_of_items_in_the_returned_list>, 
   'fibonacci_numbers': [ 0, 1, 1, 2 .... ]
}

Function is implemented as a GET /function/fibonacii?number=value.
The Fibonacci Series sum return is formatted as a JSON string in the format below.

{
   'function' : 'fibonacci_sum',
   'sum': <sum>, 
}

Errors are, also, returned with JSON formatted string.  Error format is as 
follows:

{
   'called_url' : <url string>,
   'called_method' : <method string>,
   'error_message': "Error Description string"
}

A Base class MathServiceError was created to be extended for any more specific 
errors created by the service.  Extended from this is the ParameterError class 
which is used as the basis for parameter specific errors:
NonIntegerError     - Indicates that a negative index was selected in a list 
                      or series.
NegativeIndiceError - Indicates that a negative index was selected in a list 
                      or series.
OutOfRangeError     - Indicates that an index was selected in a list or series 
                      out of the allowed range.
NoInputError        - Indicates that no index was provided for the operation.


Implemented files:

mathservice.py      - Setup and run Flask server.  Receive and process URL mappings.
fibonacci.py        - Utility to perform Fibonacci Series calculations.
MathServiceError.py - Class to wrap error information.

in tests directory:

test_math_service.py      - unit tests to validate mappings and responses.
test_fibonacci.py         - unit tests validating calculations.
test_service_exception.py - unit tests validating exception information.